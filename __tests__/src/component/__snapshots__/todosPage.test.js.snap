// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TodosPage should render correct 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TodosPage />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <div
          className="tool-bar"
        >
          <AddButton
            className="add-btn"
          />
        </div>,
        <div
          className="todos-view"
        >
          <div
            className="filter-button"
          >
            <FilterButton
              onClick={[Function]}
            />
            <Connect(FilterPanel)
              onHidden={[Function]}
              show={false}
            />
          </div>
          <div
            className="lists-area"
          >
            <Connect(TodoList) />
          </div>
          <div
            className="sort-btn"
          >
            <Connect(SortButton)
              style={
                Object {
                  "display": "inline",
                }
              }
            />
          </div>
        </div>,
      ],
      "className": "todo-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <AddButton
            className="add-btn"
          />,
          "className": "tool-bar",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "className": "add-btn",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <div
              className="filter-button"
            >
              <FilterButton
                onClick={[Function]}
              />
              <Connect(FilterPanel)
                onHidden={[Function]}
                show={false}
              />
            </div>,
            <div
              className="lists-area"
            >
              <Connect(TodoList) />
            </div>,
            <div
              className="sort-btn"
            >
              <Connect(SortButton)
                style={
                  Object {
                    "display": "inline",
                  }
                }
              />
            </div>,
          ],
          "className": "todos-view",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <FilterButton
                  onClick={[Function]}
                />,
                <Connect(FilterPanel)
                  onHidden={[Function]}
                  show={false}
                />,
              ],
              "className": "filter-button",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "onHidden": [Function],
                  "show": false,
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
            ],
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Connect(TodoList) />,
              "className": "lists-area",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": <Connect(SortButton)
                style={
                  Object {
                    "display": "inline",
                  }
                }
              />,
              "className": "sort-btn",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "style": Object {
                  "display": "inline",
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            "type": "div",
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <div
            className="tool-bar"
          >
            <AddButton
              className="add-btn"
            />
          </div>,
          <div
            className="todos-view"
          >
            <div
              className="filter-button"
            >
              <FilterButton
                onClick={[Function]}
              />
              <Connect(FilterPanel)
                onHidden={[Function]}
                show={false}
              />
            </div>
            <div
              className="lists-area"
            >
              <Connect(TodoList) />
            </div>
            <div
              className="sort-btn"
            >
              <Connect(SortButton)
                style={
                  Object {
                    "display": "inline",
                  }
                }
              />
            </div>
          </div>,
        ],
        "className": "todo-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <AddButton
              className="add-btn"
            />,
            "className": "tool-bar",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "className": "add-btn",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                className="filter-button"
              >
                <FilterButton
                  onClick={[Function]}
                />
                <Connect(FilterPanel)
                  onHidden={[Function]}
                  show={false}
                />
              </div>,
              <div
                className="lists-area"
              >
                <Connect(TodoList) />
              </div>,
              <div
                className="sort-btn"
              >
                <Connect(SortButton)
                  style={
                    Object {
                      "display": "inline",
                    }
                  }
                />
              </div>,
            ],
            "className": "todos-view",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  <FilterButton
                    onClick={[Function]}
                  />,
                  <Connect(FilterPanel)
                    onHidden={[Function]}
                    show={false}
                  />,
                ],
                "className": "filter-button",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "onClick": [Function],
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "onHidden": [Function],
                    "show": false,
                  },
                  "ref": null,
                  "rendered": null,
                  "type": [Function],
                },
              ],
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Connect(TodoList) />,
                "className": "lists-area",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": <Connect(SortButton)
                  style={
                    Object {
                      "display": "inline",
                    }
                  }
                />,
                "className": "sort-btn",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "style": Object {
                    "display": "inline",
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              "type": "div",
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
