// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`SortButton should render correct as component 1`] = `
<div
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
>
  <p
    style={
      Object {
        "display": "inline",
      }
    }
  >
    Sort by
  </p>
  <Dropdown
    mouseEnterDelay={0.15}
    mouseLeaveDelay={0.1}
    overlay={
      <Menu
        className=""
        onClick={[Function]}
        prefixCls="ant-menu"
        theme="light"
      >
        <MenuItem>
          <a>
            Due Date
          </a>
        </MenuItem>
        <MenuItem>
          <a>
            Create Time
          </a>
        </MenuItem>
      </Menu>
    }
    placement="bottomLeft"
    prefixCls="ant-dropdown"
    trigger={
      Array [
        "click",
      ]
    }
  >
    <a>
      createTime
    </a>
  </Dropdown>
  <SortRuleSpan
    className="glyphicon glyphicon-sort-by-order"
    onClick={[Function]}
  />
</div>
`;

exports[`SortButton should render correct as container 1`] = `
<SortButton
  onSortByChanged={[Function]}
  onSortColumnSelected={[Function]}
  sortByType="asc"
  sortColumn="createTime"
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
  storeSubscription={
    Subscription {
      "listeners": Object {
        "clear": [Function],
        "get": [Function],
        "notify": [Function],
        "subscribe": [Function],
      },
      "onStateChange": [Function],
      "parentSub": undefined,
      "store": Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      },
      "unsubscribe": [Function],
    }
  }
/>
`;
